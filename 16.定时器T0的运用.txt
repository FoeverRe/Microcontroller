///*-----------------------------------------------
//  名称：定时器0的运用
//  编写：16
//  日期：2024.4.25
//  修改：无
//  内容：//这段代码实现了一个简单的计数器系统，其中包括了以下功能：
//使用 8051 单片机控制数码管显示数字，并可以实时更新显示的数字。
//当瓶子计数器 `bottler` 达到100时，程序会在数码管上显示数字 "100"，并启动定时器0进行计时。
//使用定时器0的中断功能，当定时器0计时完成时，会检查瓶子计数器 `bottler` 是否已经达到100个瓶子。如果没有达到，瓶子计数器会继续增加；如果已经达到，则不再增加。
//总的来说，这段代码实现了一个简单的瓶子计数器系统，可以在数码管上实时显示瓶子的数量，并在达到100个瓶子时进行相应的处理，例如启动定时器进行计时。
//------------------------------------------------*/
unsigned char count = 0; // 初始化计数器为0
unsigned char bottler = 0; // 初始化瓶子计数器为0
unsigned char RE[] = { 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F }; // 数码管段码数组
// 延时函数，参数 xms 表示延时的毫秒数
void Delay(unsigned int xms) {
    while (xms--) {
        unsigned char i = 2, j = 239;
        do {
            while (--j);
        } while (--i);
    }
}
// 数码管显示函数
void re(unsigned char Location, unsigned char Number) {
    switch (Location) {
    case 1: P2_4 = 1; P2_3 = 1; P2_2 = 1; break; // 控制数码管位置
    case 2: P2_4 = 1; P2_3 = 1; P2_2 = 0; break;
    case 3: P2_4 = 1; P2_3 = 0; P2_2 = 1; break;
    case 4: P2_4 = 1; P2_3 = 0; P2_2 = 0; break;
    case 5: P2_4 = 0; P2_3 = 1; P2_2 = 1; break;
    case 6: P2_4 = 0; P2_3 = 1; P2_2 = 0; break;
    case 7: P2_4 = 0; P2_3 = 0; P2_2 = 1; break;
    case 8: P2_4 = 0; P2_3 = 0; P2_2 = 0; break;
    }
    P0 = RE[Number]; // 在数码管上显示数字
    Delay(5); // 延时一段时间
}
void main() {
    EA = 1; // 开启总中断允许
    // 初始化定时器0
    TL0 = 0; // 清零定时器0低字节
    TH0 = 0; // 清零定时器0高字节
    TMOD &= 0xF0; // 清除定时器0模式位
    TMOD |= 0x01; // 设置定时器0为模式1
    ET0 = 1; // 开启定时器0中断允许
    while (1) {
        if (bottler == 100) { // 装满100个
            re(1, 1); // 显示数字1
            re(2, 0); // 显示数字0
            re(3, 0); // 显示数字0
            P2_1 = 0; // 控制其他功能
            P2_0 = 0; // 控制其他功能
            TR0 = 1; // 启动定时器0
        }
        count++; // 计数器自增
        re(1, count / 10); // 显示十位数
        re(2, count % 10); // 显示个位数
    }
}
// 定时器0中断服务程序
void timer0_isr() interrupt 1 {
    // 检查是否溢出100个瓶子
    if (bottler < 100) {
        bottler++; // 瓶子计数器自增
    }
    // 清除定时器0溢出标志
    TF0 = 0;
}